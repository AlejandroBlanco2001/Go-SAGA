services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9094:9094"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - saga-network
  
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8085:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_READONLY=false
      - SERVER_PORT=8080
    networks:
      - saga-network
    depends_on:
      kafka:
        condition: service_started

  order-database:
    build:
      context: .
      dockerfile: docker/databases/orders-data.dockerfile
    restart: always
    volumes:
      - orders_postgres_data:/var/lib/postgresql/data
    networks:
      - saga-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-api:
    build:
      context: .
      dockerfile: docker/orders-command/orders.dockerfile
    container_name: orders-api
    environment:
      - DATABASE_NAME=orders_database
      - HOST=order-database
      - SERVICE_TOPIC_READ=inventory
      - SERVICE_TOPIC_WRITE=orders
    restart: always
    ports:
      - "8080:8080"
    networks:
      - saga-network
    depends_on:
      order-database:
        condition: service_healthy
      kafka:
        condition: service_started

  inventory-database:
    build:
      context: .
      dockerfile: docker/databases/inventory-data.dockerfile
    restart: always
    volumes:
      - inventory_postgres_data:/var/lib/postgresql/data
    networks:
      - saga-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  inventory-api:
    build:
      context: .
      dockerfile: docker/inventory-command/inventory.dockerfile
    container_name: inventory-api
    environment:
      - DATABASE_NAME=inventory_database
      - HOST=inventory-database
      - SERVICE_TOPIC_READ=orders
      - SERVICE_TOPIC_WRITE=inventory
    restart: always
    ports:
      - "8081:8080"
    networks:
      - saga-network
    depends_on:
      inventory-database:
        condition: service_healthy
      kafka:
        condition: service_started

networks:
  saga-network:
    driver: bridge

volumes:
  orders_postgres_data:
  inventory_postgres_data:
  kafka_data:
